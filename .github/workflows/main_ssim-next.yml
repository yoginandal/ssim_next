name: Build and deploy Next.js app to Azure Web App - Ssim-Next

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Set up Node.js 22
        uses: actions/setup-node@v3
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js app
        run: pnpm run build

      - name: Create optimized production dependencies
        run: |
          echo "Creating optimized production installation..."
          # Remove dev dependencies and use npm for Azure compatibility
          rm -rf node_modules

          # Generate package-lock.json and install with npm for Azure compatibility
          npm install --package-lock-only
          npm ci --omit=dev --ignore-scripts

          # Aggressively optimize node_modules for deployment
          echo "Optimizing node_modules for deployment..."

          # Remove documentation and metadata files
          find node_modules -name "*.md" -type f -delete 2>/dev/null || true
          find node_modules -name "*.txt" -type f -delete 2>/dev/null || true
          find node_modules -name "LICENSE*" -type f -delete 2>/dev/null || true
          find node_modules -name "CHANGELOG*" -type f -delete 2>/dev/null || true
          find node_modules -name "HISTORY*" -type f -delete 2>/dev/null || true
          find node_modules -name "AUTHORS*" -type f -delete 2>/dev/null || true

          # Remove development and testing files
          find node_modules -name "*.map" -type f -delete 2>/dev/null || true
          find node_modules -name ".DS_Store" -type f -delete 2>/dev/null || true
          find node_modules -name "Thumbs.db" -type f -delete 2>/dev/null || true

          # Remove test, example, and documentation directories
          find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "testing" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "example" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "examples" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "demo" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "documentation" -type d -exec rm -rf {} + 2>/dev/null || true

          # Remove TypeScript declaration files (not needed at runtime)
          find node_modules -name "*.d.ts" -type f -delete 2>/dev/null || true

          # Remove source files (keep only built files)
          find node_modules -name "src" -type d -exec rm -rf {} + 2>/dev/null || true
          find node_modules -name "lib" -type d -name "*.ts" -exec rm -rf {} + 2>/dev/null || true

          echo "Node_modules optimization completed"
          echo "Optimized size: $(du -sh node_modules | cut -f1)"

      - name: Prepare optimized deployment package
        run: |
          echo "Creating optimized deployment package..."
          rm -f deploy.zip

          # Keep node_modules/.bin/* for executables like 'next'
          # Use maximum compression and exclude unnecessary files
          zip -9 -r deploy.zip \
            .next \
            public \
            package.json \
            node_modules \
            next.config.js \
            -x "node_modules/.cache/*" \
            -x "node_modules/*/node_modules/*" \
            -x "*.log" \
            -x "npm-debug.log*" \
            -x "yarn-debug.log*" \
            -x "yarn-error.log*" \
            2>/dev/null || true

          # Display package information
          PACKAGE_SIZE=$(du -h deploy.zip | cut -f1)
          echo "Deployment package created: $PACKAGE_SIZE"

          # Verify essential files are included
          echo "Verifying package contents..."
          unzip -l deploy.zip | head -20

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deploy-package
          path: deploy.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10 # Optimized timeout

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deploy-package

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: "Ssim-Next"
          slot-name: "Production"
          package: deploy.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E2F380228651460DAA19A08B90CFD7D6 }}
